var n=`:host { user-select: none; }\r
::slotted(*)\r
{\r
    user-select: none;\r
    cursor: pointer;\r
}\r
::slotted(:hover)\r
{\r
    background-color: var(--background-color-hover, rgb(221, 221, 221));\r
}\r
::slotted([aria-selected])\r
{\r
    background-color: var(--background-color-selected, highlight);\r
    color: var(--color-selected, highlighttext);\r
}\r
@media (prefers-color-scheme: dark) \r
{\r
    ::slotted(:hover)\r
    {\r
        --background-color-hover: rgb(197, 197, 197);\r
    }\r
}`;var d=new CSSStyleSheet;d.replaceSync(n);document.addEventListener("keydown",s=>{if(o.multipleModifierKeys.indexOf(s.code)>-1){o._multipleModifierActive=!0;return}});document.addEventListener("keyup",s=>{o.multipleModifierKeys.indexOf(s.code)>-1&&(o._multipleModifierActive=o.multipleModifierActive)});var c="selectable-items",o=class s extends HTMLElement{static observedAttributes=[];static _multipleModifierActive=!1;static multipleModifierKeys=["ShiftLeft","ShiftRight","ControlLeft","ControlRight"];static multipleModifierActive=!1;static selectKeys=["Enter","Space"];static selectedClassName="selected";selected=()=>[...this.querySelectorAll("[aria-selected]")];constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML="<slot></slot>",this.shadowRoot.adoptedStyleSheets.push(d),this.addEventListener("keydown",e=>{if(s.selectKeys.indexOf(e.code)>-1){let t=e.composedPath().find(l=>l instanceof HTMLElement&&l.parentElement==this);if(this.#e(t)==!1)return;e.preventDefault(),this.selectItem(t)}}),this.addEventListener("click",e=>{let t=e.composedPath().find(l=>l instanceof HTMLElement&&l.parentElement==this);t==null||this.#e(t)==!1||this.selectItem(t)}),this.shadowRoot.querySelector("slot").addEventListener("slotchange",e=>{let t=e.target.assignedElements();for(let i=0;i<t.length;i++)t[i].hasAttribute("tabIndex")==!1&&t[i].setAttribute("tabIndex","0")})}selectItem(e){let t=this.getAttribute("multiple")??this.getAttribute("multi");return(s._multipleModifierActive==!1||t==null)&&[...(e.parentElement??this).children].reduce((l,r,u)=>(this.contains(r)&&r.hasAttribute("aria-selected")&&l.push(r),l),new Array).forEach(l=>this.#l(l)),this.#t(e),this.selected()}#t(e){e.classList.add(this.getAttribute("selected-class-name")??s.selectedClassName),e.setAttribute("aria-selected","option")}#l(e){e.classList.remove(this.getAttribute("selected-class-name")??s.selectedClassName),e.removeAttribute("aria-selected")}#e(e){let t=new Set([e]),i=this.hasAttribute("multiple")||this.hasAttribute("multi");if(s._multipleModifierActive==!0&&i==!0)for(let r of this.selected())t.add(r);return this.dispatchEvent(new CustomEvent("change",{bubbles:!0,composed:!0,cancelable:!0,detail:{selected:Array.from(t)}}))}};customElements.get(c)==null&&customElements.define(c,o);export{o as SelectableItemsElement};
