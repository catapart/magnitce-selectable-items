var n=`:host { user-select: none; }\r
::slotted(*)\r
{\r
    user-select: none;\r
    cursor: pointer;\r
}\r
::slotted(:hover)\r
{\r
    background-color: var(--background-color-hover, rgb(221, 221, 221));\r
}\r
::slotted(.selected)\r
{\r
    background-color: var(--background-color-selected, highlight);\r
    color: var(--color-selected, highlighttext);\r
}\r
@media (prefers-color-scheme: dark) \r
{\r
    ::slotted(:hover)\r
    {\r
        --background-color-hover: rgb(197, 197, 197);\r
    }\r
}`;var d=new CSSStyleSheet;d.replaceSync(n);document.addEventListener("keydown",e=>{if(i.multipleModifierKeys.indexOf(e.code)>-1){i._multipleModifierActive=!0;return}});document.addEventListener("keyup",e=>{i.multipleModifierKeys.indexOf(e.code)>-1&&(i._multipleModifierActive=i.multipleModifierActive)});var c="selectable-items",i=class e extends HTMLElement{static observedAttributes=[];static _multipleModifierActive=!1;static multipleModifierKeys=["ShiftLeft","ShiftRight","ControlLeft","ControlRight"];static multipleModifierActive=!1;static selectKeys=["Enter","Space"];static selectedClassName="selected";selected=()=>[...this.querySelectorAll(`.${e.selectedClassName}`)];handledItems=new WeakSet;constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML="<slot></slot>",this.shadowRoot.adoptedStyleSheets.push(d),this.shadowRoot.querySelector("slot").addEventListener("slotchange",o=>{let s=o.target.assignedElements();for(let l=0;l<s.length;l++)this.handledItems.has(s[l])||(s[l].setAttribute("tabIndex","0"),s[l].addEventListener("keydown",t=>{e.selectKeys.indexOf(t.code)>-1&&this.selectItem(t.currentTarget)}),s[l].addEventListener("click",t=>{this.selectItem(t.currentTarget)}),this.handledItems.add(s[l]))})}selectItem(o){let s=this.getAttribute("multiple")??this.getAttribute("multi");(e._multipleModifierActive==!1||s==null)&&[...(o.parentElement??this).children].reduce((t,r,h)=>(this.handledItems.has(r)&&r.classList.contains(e.selectedClassName)&&t.push(r),t),new Array).forEach(t=>t.classList.remove(e.selectedClassName)),o.classList.add(e.selectedClassName),this.dispatchEvent(new Event("change"))}};customElements.get(c)==null&&customElements.define(c,i);export{i as SelectableItemsElement};
