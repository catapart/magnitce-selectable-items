var c=`:host { user-select: none; }
::slotted(*)
{
    user-select: none;
    cursor: pointer;
}
::slotted(:hover)
{
    background-color: var(--background-color-hover, rgb(221, 221, 221));
}
::slotted(.selected)
{
    background-color: var(--background-color-selected, highlight);
    color: var(--color-selected, highlighttext);
}
@media (prefers-color-scheme: dark) 
{
    ::slotted(:hover)
    {
        --background-color-hover: rgb(197, 197, 197);
    }
}`;var a=new CSSStyleSheet;a.replaceSync(c);document.addEventListener("keydown",e=>{if(o.multipleModifierKeys.indexOf(e.code)>-1){o._multipleModifierActive=!0;return}});document.addEventListener("keyup",e=>{o.multipleModifierKeys.indexOf(e.code)>-1&&(o._multipleModifierActive=o.multipleModifierActive)});var d="selectable-items",o=class e extends HTMLElement{static observedAttributes=[];static _multipleModifierActive=!1;static multipleModifierKeys=["ShiftLeft","ShiftRight","ControlLeft","ControlRight"];static multipleModifierActive=!1;static selectKeys=["Enter","Space"];static selectedClassName="selected";selected=()=>[...this.querySelectorAll(`.${e.selectedClassName}`)];constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML="<slot></slot>",this.shadowRoot.adoptedStyleSheets.push(a),this.addEventListener("click",t=>{let s,l=t.composedPath();for(let i=0;i<l.length;i++){let n=l[i];n.parentElement==this&&(s=n.tagName=="SLOT"?n.assignedElements().find(r=>l.indexOf(r)>-1):n)}s!=null&&this.selectItem(s)}),this.addEventListener("keydown",t=>{e.selectKeys.indexOf(t.code)>-1&&(this.selectItem(t.target),t.preventDefault())}),this.shadowRoot.querySelector("slot").addEventListener("slotchange",t=>{let s=t.target.assignedElements();for(let l=0;l<s.length;l++)s[l].hasAttribute("tabIndex")||s[l].setAttribute("tabIndex","0")})}selectItem(t){let s=this.getAttribute("multiple")??this.getAttribute("multi");(e._multipleModifierActive==!1||s==null)&&[...(t.parentElement??this).children].reduce((i,n,r)=>(n.classList.contains(e.selectedClassName)&&i.push(n),i),new Array).forEach(i=>i.classList.remove(e.selectedClassName)),t.classList.add(e.selectedClassName),this.dispatchEvent(new Event("change"))}};customElements.get(d)==null&&customElements.define(d,o);export{o as SelectableItemsElement};
